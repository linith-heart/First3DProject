//=============================================================================
//
// エネミー処理 [enemy.cpp]
// Author : 川井一生
/*
enemy.cpp でエネミー全部を管理
エネミーのメインとして利用

main for all enemy types
*/
//=============================================================================
#include "enemy.h"
#include "boar.h"
//#include "car.h"
//#include "sight.h"
//#include "cannon.h"

//=============================================================================
// マクロ定義


//=============================================================================
// プロトタイプ宣言


//=============================================================================
// グローバル変数
ENE						eneWk;			// エネミーへのポインタ

//=============================================================================
// 初期化処理
HRESULT InitEnemy(void)
{
	ENE *ene = &eneWk;
	LPDIRECT3DDEVICE9 pDevice = GetDevice();
	
	// イノシシの初期化処理
	InitBoar();

	// 車の初期化処理
	//InitCar();
	
	// 大砲の初期化処理
	//InitCannon();

	// サイトの初期化処理
	//InitSight();
	return S_OK;
}

//=============================================================================
// 終了処理
void UninitEnemy(void)
{
	// イノシシの終了処理
	UninitBoar();

	// 車の終了処理
	//UninitCar();

	// 大砲の終了処理
	//UninitCannon();

	// サイトの終了処理
	//UninitSight();

}

//=============================================================================
// 更新処理
void UpdateEnemy(void)
{
	// イノシシの最新処理
	UpdateBoar();

	// 車の最新処理
	//UpdateCar();

	// 大砲の最新処理
	//UpdateCannon();

	// サイトの最新処理
	//UpdateSight();
}

//=============================================================================
// 描画処理
void DrawEnemy(void)
{
	// イノシシの描画
	DrawBoar();

	// 車の描画
	//DrawCar();

	// 大砲の描画
	//DrawCannon();

	// サイトの描画
	//DrawSight();
}

//=============================================================================
// エネミーのゲット関数
ENE *GetEnemy(void)
{
	return (&eneWk);
}